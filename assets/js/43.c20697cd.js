(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{473:function(t,v,l){"use strict";l.r(v);var e=l(56),_=Object(e.a)({},(function(){var t=this,v=t.$createElement,l=t._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h2",{attrs:{id:"effective-c"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#effective-c"}},[t._v("#")]),t._v(" Effective C++")]),t._v(" "),l("ol",[l("li",[l("p",[t._v("尽量以const、enum、inline代替#define")])]),t._v(" "),l("li",[l("p",[t._v("尽可能使用const")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("如果const出现在星号左边，表示被指物是常量；如果出现在星号右边，表示指针自身是常量")])]),t._v(" "),l("li",[l("p",[t._v("迭代器的作用像一个T*指针，声明迭代器为const即声明指针为const；使用const_iterator保证迭代器所指的东西不可变")]),t._v(" "),l("div",{staticClass:"language-c++ extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("const std::vector<int> ::iterator\nstd::vector<int>::const_iterator\n")])])])]),t._v(" "),l("li",[l("p",[t._v("返回值设为const避免对返回值进行误操作")])]),t._v(" "),l("li",[l("p",[t._v("const成员函数：成员函数更改了指针所指对象，但如果只有指针隶属于对象，则称此函数为bitwise const，不会引发编译器异议")])]),t._v(" "),l("li",[l("p",[t._v("mutable释放掉non-static成员变量的bitwise constness 约束")])]),t._v(" "),l("li",[l("p",[t._v("non-const函数必须由non-const对象调用")])])])]),t._v(" "),l("li",[l("p",[t._v("确定对象被使用前先初始化")]),t._v(" "),l("ul",[l("li",[t._v("非内置类型对象的成员变量的初始化动作发生在进入构造函数之前，即成员对象的default构造函数被调用的时候")]),t._v(" "),l("li",[t._v("构造函数中的赋值操作是先调用default构造函数后再立刻赋予新值；初始化列表将构造函数的实参作为成员对象copy构造函数的实参")]),t._v(" "),l("li",[t._v("class的成员变量总是按照声明顺序被初始化")]),t._v(" "),l("li",[t._v("函数内的static对象称为local-static对象，其他static对象（global对象、定义在namespace、class、file作用域内被声明为static的对象）称为non-static对象")]),t._v(" "),l("li",[t._v("由于C++对定义于不同编译单元内的non-static对象的初始化次序并无明确定义，将non-static对象转化为local static对象，放在一个专属函数中并返回对象的引用")])])]),t._v(" "),l("li",[l("p",[t._v("了解C++默默编写并调用了哪些函数")]),t._v(" "),l("ul",[l("li",[t._v("编译器会为空类声明一个default构造函数、copy构造函数、copy赋值函数、析构函数（所有函数都是public且inline）")]),t._v(" "),l("li",[t._v("编译器生成的是non-virtual析构函数，除非基类有virtual析构函数")]),t._v(" "),l("li",[t._v("成员变量有reference和const的，赋值操作必须定义copy赋值操作符函数")])])]),t._v(" "),l("li",[l("p",[t._v("若不想使用编译器自动生成的copy构造函数和copy赋值操作符，可以使用private声明，并不予定义；此时成员函数和友元函数还是可以调用，会在链接阶段报错，如果想将链接阶段的错误移至编译期，可以设置一个基类，在基类中使用private声明，并不予定义，这样在尝试拷贝子对象时，编译器尝试生成copy构造和copy赋值，这些函数会调用基类的copy构造和copy赋值，此时编译器就会报错，因为基类的这两个函数是private")])]),t._v(" "),l("li",[l("p",[t._v("为多态基类声明virtual析构函数")]),t._v(" "),l("ul",[l("li",[t._v("当派生类对象经由一个基类指针被删除，而基类只有non-virtual析构函数，则对象的派生类成分通常不会被销毁")]),t._v(" "),l("li",[t._v("具有多态性质的基类应该声明virtual析构。如果基类带有任何virtual函数，应该拥有一个virtual析构函数")])])]),t._v(" "),l("li",[l("p",[t._v("别让异常逃离析构函数")]),t._v(" "),l("ul",[l("li",[t._v("如果一个被析构函数调用的函数可能抛出异常，析构函数应该捕捉，然后吞下异常或结束程序")])])]),t._v(" "),l("li",[l("p",[t._v("绝不在构造和析构函数中调用virtual函数")]),t._v(" "),l("ul",[l("li",[t._v("在基类构造期间，virtual函数不是virtual函数")]),t._v(" "),l("li",[t._v("在派生类对象的基类构造期间，派生类对象的类型是基类而不是派生类，因为此时派生类的成员变量还未从初始化")])])]),t._v(" "),l("li",[l("p",[t._v("令operator=返回一个*this引用")])]),t._v(" "),l("li",[l("p",[t._v("在oprator=中处理自我赋值")])])]),t._v(" "),l("ul",[l("li",[t._v("证同测试，比较赋值对象和目标对象是否是同一个")]),t._v(" "),l("li",[t._v("异常处理")])]),t._v(" "),l("ol",{attrs:{start:"11"}},[l("li",[l("p",[t._v("复制对象时不要忘记每一个成分")]),t._v(" "),l("ul",[l("li",[t._v("当编写复制构造函数和赋值运算符时，赋值所有的local成员变量；调用所有基类的适当的复制构造函数和赋值运算符")]),t._v(" "),l("li",[t._v("复制构造函数和赋值运算符不能互相调用")])])]),t._v(" "),l("li",[l("p",[t._v("以对象管理资源")]),t._v(" "),l("ul",[l("li",[t._v("利用对象的析构函数自动释放资源")]),t._v(" "),l("li",[t._v("auto-ptr类指针对象，智能指针，其析构函数自动对所指对象调用delete；通过复制构造函数和复制操作符复制auto-ptr，复制所得对象将取得资源的唯一拥有权")]),t._v(" "),l("li",[t._v("shared-ptr引用计数")]),t._v(" "),l("li",[t._v("RAII（Resource Acquisition Is Initialization）资源取得的时机是初始化")])])]),t._v(" "),l("li",[l("p",[t._v("在资源管理中小心copying行为")]),t._v(" "),l("ul",[l("li",[t._v("禁止复制")]),t._v(" "),l("li",[t._v("引用计数")]),t._v(" "),l("li",[t._v("深度拷贝")]),t._v(" "),l("li",[t._v("转移底部资源拥有权")])])]),t._v(" "),l("li",[l("p",[t._v("在资源管理类中提供对原始资源的访问")]),t._v(" "),l("ul",[l("li",[t._v("资源管理类如auto-ptr、shared-ptr")]),t._v(" "),l("li",[t._v("通过显式转换和隐式转换将RAII类对象转化为其所内含的原始资源")])])]),t._v(" "),l("li",[l("p",[t._v("成对使用new和delete时要采取相同的形式")]),t._v(" "),l("ul",[l("li",[t._v("单一对象的内存布局和不同于数组的内存布局")]),t._v(" "),l("li",[t._v("delete针对内存调用一个析构函数，delete []调用多个")])])]),t._v(" "),l("li",[l("p",[t._v("以独立语句将new对象置于智能指针")]),t._v(" "),l("div",{staticClass:"language-c++ extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("processWidget(std::tr1::shared_ptr<Widget>(new Widget), priority());\n")])])]),l("ol",[l("li",[t._v("需要执行“new Widget”")]),t._v(" "),l("li",[t._v("调用priority")]),t._v(" "),l("li",[t._v("调用tr1::shared_ptr构造函数")])]),t._v(" "),l("p",[t._v("编译器执行次序是不固定的，但如果调用priority异常，则可能引发资源泄露，这就是资源被创建和资源被转换为资源管理对象两个时间点之间可能发生干扰")]),t._v(" "),l("p",[t._v("解决方法是使用分离语句")]),t._v(" "),l("div",{staticClass:"language-c++ extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("std::tr1::shared_ptr<Widget> pw(new Widget);\nprocessWidget(pw, priority());\n")])])])]),t._v(" "),l("li",[l("p",[t._v("接口容易被正确使用，不宜被误用")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("接口的参数不是单纯的数据，而是内部是数据的类型对象")]),t._v(" "),l("div",{staticClass:"language-c++ extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("class Month\n{\npublic:\n    static Month Jan() { return Month(1);}\n    static Month Feb() { return Month(2);}\n    ...\n    static Month Dec() { return Month(12);}\nprivate:\n    explicit Month(int m); //不能自己生成新月份\n}\nclass Date\n{\npublic:\n    Date(const Month& m, const Day& d, const Year& y);\n}\nDate d(Month::Mar(), Day(30), Year(1995));\n")])])])]),t._v(" "),l("li",[l("p",[t._v("显式的const约束")])]),t._v(" "),l("li",[l("p",[t._v("cross-DLL problem：对象在动态链接库中被new创建，却在另一个DLL内被delete")])])])]),t._v(" "),l("li",[l("p",[t._v("设计class")]),t._v(" "),l("ul",[l("li",[t._v("新的对象应该如何被创建和销毁")]),t._v(" "),l("li",[t._v("对象的初始化和对象赋值")]),t._v(" "),l("li",[t._v("新的对象怎样被按值传递，copy构造函数用来定义按值传递的实现")]),t._v(" "),l("li",[t._v("继承关系")]),t._v(" "),l("li",[t._v("类型转换，类型转换函数operator classB")]),t._v(" "),l("li",[t._v("private驳回调用标准函数")]),t._v(" "),l("li",[t._v("成员类型：public、protected、private")]),t._v(" "),l("li",[t._v("是否应该定义一个新的类，或应该定义一个新的template")])])]),t._v(" "),l("li",[l("p",[t._v("函数调用参数const 引用代替值传递")]),t._v(" "),l("ul",[l("li",[t._v("引用传递不需要调用构造和析构函数")]),t._v(" "),l("li",[t._v("const保证参数对象不会被改变")]),t._v(" "),l("li",[t._v("引用传递避免对象切割问题。当一个派生类对象通过值传递，会被视为一个基类对象，调用基类的copy构造函数，派生类对象的特化性质被切割")]),t._v(" "),l("li",[t._v("除了内置类型、STL迭代器和函数对象，其他情况下一般使用const引用传递参数")])])]),t._v(" "),l("li",[l("p",[t._v("返回对象还是引用")]),t._v(" "),l("ul",[l("li",[t._v("local static带来多线程安全性问题")]),t._v(" "),l("li",[t._v("单例模式，在单线程中合理返回reference指向一个local static对象")])])]),t._v(" "),l("li",[l("p",[t._v("将成员变量声明为private")]),t._v(" "),l("ul",[l("li",[t._v("getter函数声明为const，防止改变成员变量")])])]),t._v(" "),l("li",[l("p",[t._v("宁以non-member、non-friend替换member函数，member函数A可以访问private成员变量，在member函数B中调用member函数A则会增加对private成员变量访问的函数的数量，所以member函数B用non-member函数代替")])]),t._v(" "),l("li",[l("p",[t._v("如果所有参数都需要类型转换，采用non-member函数")]),t._v(" "),l("div",{staticClass:"language-c++ extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("class Rational{\npublic:\n    const Rational operator* (const Rational& rhs) const;\n}\nRational a;\nauto b = a * 2;//2会隐式转换为Rational\n//auto b = 2 * a; 这里2并没有operator*成员函数，同时也无法进行隐式转换，编译器会尝试寻找non-member operator*\n\n解决方法：在Rational类外定义一个non-member函数\nconst Rational operator* (const Rational& lhs, const Rational& rhs)\n{\n    return Rational(lhs * rhs);\n}\n")])])]),l("ul",[l("li",[t._v("member函数的反面是non-member函数，而不是friend函数")])])]),t._v(" "),l("li",[l("p",[t._v("考虑写一个不抛异常的swap函数")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("std::swap置换两对象值")])]),t._v(" "),l("li",[l("p",[t._v("特化是对模板参数完全具体化的实现，而偏特化是对模板参数部分具体化或对特定情况的实现")]),t._v(" "),l("div",{staticClass:"language-c++ extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("class Widget\n{\npublic:\n    void swap(Widget& other)\n    {\n        using namespace std;\n        swap(this.PImp, other.pImp)\n    }\n}\n\nnamespace std{\n    template<> //表示是std::swap的一个T为Widget的全特化版本，为标准的template制造特化版本是被允许的\n    void swap<Widget>(Widget& a, Widget& b)\n    {\n        a.swap(b);\n    }\n}\n")])])])]),t._v(" "),l("li",[l("p",[t._v("C++只允许对class template偏特化，不能在function template偏特化，可以添加重载版本，可以全特化std内的template，但不可以添加新的template")]),t._v(" "),l("div",{staticClass:"language-c++ extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("namespace WidgetStuff{ //这里不可以添加到std\n    template<typename T>\n    class Widget{};\n    \n    template<typename T> \n    void swap(Widget<T>& a, Widget<T>& b) //std::swap的重载版本\n    {\n        a.swap(b);\n    }\n}\n")])])])])])]),t._v(" "),l("li",[l("p",[t._v("尽可能延后变量定义")])]),t._v(" "),l("li",[l("p",[t._v("尽量少强制类型转换")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("C风格转型")]),t._v(" "),l("div",{staticClass:"language-c++ extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("(T)expression\n")])])])]),t._v(" "),l("li",[l("p",[t._v("函数风格转型")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("T(expression)\n")])])])]),t._v(" "),l("li",[l("p",[t._v("dynamic_cast：向下转型，许多实现版本执行速度很慢")])]),t._v(" "),l("li",[l("p",[t._v("避免将基类指针动态转化为派生类指针")]),t._v(" "),l("ol",[l("li",[t._v("使用容器并在其中存储直接指向派生类对象的指针")]),t._v(" "),l("li",[t._v("使用virtual函数")])])]),t._v(" "),l("li",[l("p",[t._v("reinterpret_cast：实际结果可能取决于编译器，所以不可移植")])])])]),t._v(" "),l("li",[l("p",[t._v("避免返回引用、指针、迭代器指向对象内部")])]),t._v(" "),l("li",[l("p",[t._v("异常安全性函数：")]),t._v(" "),l("ul",[l("li",[t._v("不泄露任何资源")]),t._v(" "),l("li",[t._v("不允许数据损坏")])]),t._v(" "),l("p",[t._v("异常被抛出时，资源可能还未被释放，变量可能还未被合理赋值")])]),t._v(" "),l("li",[l("p",[t._v("inline函数")]),t._v(" "),l("ul",[l("li",[t._v("inline函数背后的整体观念，将对此函数的每一个调用都以函数本体代替")]),t._v(" "),l("li",[t._v("空的构造函数并不可以声明为inline函数，因为包含了基类的构造")]),t._v(" "),l("li",[t._v("inline函数无法调试")])])]),t._v(" "),l("li",[l("p",[t._v("将文件间的编译依存关系降至最低")]),t._v(" "),l("p",[t._v("类中的定义")]),t._v(" "),l("ul",[l("li",[t._v("将接口从实现中分离")]),t._v(" "),l("li",[t._v("使用 类引用和指针代替类")]),t._v(" "),l("li",[t._v("使用class声明代替定义，函数声明中亦可")]),t._v(" "),l("li",[t._v("Handle class指针指向实现的类")]),t._v(" "),l("li",[t._v("抽象基类")])])]),t._v(" "),l("li",[l("p",[t._v("重载、重写、覆盖")]),t._v(" "),l("ul",[l("li",[t._v("在派生类作用域中使用using声明基类中被覆盖的函数")])])]),t._v(" "),l("li",[l("p",[t._v("区分接口继承和实现继承")]),t._v(" "),l("ul",[l("li",[t._v("纯虚函数必须被重新声明，声明纯虚函数的目的是为了让派生类只继承函数接口")]),t._v(" "),l("li",[t._v("可以为纯虚函数提供定义，调用时使用className::f")]),t._v(" "),l("li",[t._v("声明非纯虚函数是为了让派生类继承函数接口和缺省实现")]),t._v(" "),l("li",[t._v("声明非虚函数是为了让派生类继承函数的接口和强制性实现")])])]),t._v(" "),l("li",[l("p",[t._v("绝不重新定义继承来的非虚函数")]),t._v(" "),l("ul",[l("li",[t._v("非虚函数是静态绑定")])])]),t._v(" "),l("li",[l("p",[t._v("绝不重新定义继承来的缺省参数值")]),t._v(" "),l("ul",[l("li",[t._v("virtual函数是动态绑定，缺省参数值是静态绑定，可能存在调用派生类中的virtual函数，使用的是基类指定的缺省冲参数值")])])]),t._v(" "),l("li",[l("p",[t._v("明确审慎地使用多重继承")]),t._v(" "),l("ul",[l("li",[t._v("解析重载函数调用规则：在看到是否有个函数可以被取用之前，C++首先确认最佳匹配函数，然后才检验其可取用性")]),t._v(" "),l("li",[t._v("虚继承会增加大小、速度、初始化（及赋值）复杂度等成本")])])]),t._v(" "),l("li",[l("p",[t._v("隐式接口和编译器多态")]),t._v(" "),l("ul",[l("li",[t._v("隐式接口：模板类必须满足的表达式便是模板类型必须支持的隐式接口")]),t._v(" "),l("li",[t._v("编译器多态：涉及到的函数调用可能造成模板具象化，使得调用成功，以不同的template参数具象化function templates会导致调用不同的函数")])])]),t._v(" "),l("li",[l("p",[t._v("了解typename 的双重意义")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("从属名称：template中出现的名称依赖于某个template参数")])]),t._v(" "),l("li",[l("p",[t._v("嵌套从属名称：从属名称在class内呈嵌套状")])]),t._v(" "),l("li",[l("p",[t._v("嵌套从属名称C::const_iterator无法判断是否是一个类型，C++解析器会默认这个名称不是一个类型，除非显式声明typename")])]),t._v(" "),l("li",[l("p",[t._v("typename不可以出现在base class list内的嵌套从属名称前，也不可以在成员初始化中作为base class修饰符")]),t._v(" "),l("div",{staticClass:"language-c++ extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("template<typename T>\nclass Derived : public Base<T>::Nested \n{\npublic:\n    explicit Derived(int x)\n        :Base<T>::Nested(x)\n        {\n            typename Base<T>::Nested temp;\n        }\n}\n")])])])])])]),t._v(" "),l("li",[l("p",[t._v("学习处理模板化基类内的名称")]),t._v(" "),l("ul",[l("li",[t._v('模板化基类中的函数在派生类中调用要在之前加上"this->"')]),t._v(" "),l("li",[t._v("使用using声明函数位于模板化基类中")])])]),t._v(" "),l("li",[l("p",[t._v("将与参数无关的代码抽离templates")]),t._v(" "),l("ul",[l("li")])]),t._v(" "),l("li"),t._v(" "),l("li"),t._v(" "),l("li")])])}),[],!1,null,null,null);v.default=_.exports}}]);