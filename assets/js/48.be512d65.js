(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{472:function(t,a,e){"use strict";e.r(a);var v=e(56),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"stl组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stl组件"}},[t._v("#")]),t._v(" STL组件")]),t._v(" "),e("h2",{attrs:{id:"容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[t._v("#")]),t._v(" 容器")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("序列容器：动态数组（vector）、双向链表（list）、双端队列（deque）")])]),t._v(" "),e("li",[e("p",[t._v("关联容器（元素经过排序）：关联数组（map）、多重映射multimap（允许出现重复key）、、集合（set）、多重集合multiset（允许出现重复元素）")])]),t._v(" "),e("li",[e("p",[t._v("容器适配器：queue、stack、priority_queue")])]),t._v(" "),e("li",[e("p",[t._v("可复制：所有容器操作返回其元素副本")])]),t._v(" "),e("li",[e("p",[t._v("可赋值：可以用assign()给元素设定新值")])]),t._v(" "),e("li",[e("p",[t._v("可释放：从容器中删除元素时，容器释放元素所占内存，所以析构函数不能为private")])])]),t._v(" "),e("h3",{attrs:{id:"容器的数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器的数据结构"}},[t._v("#")]),t._v(" 容器的数据结构")]),t._v(" "),e("ul",[e("li",[t._v("string：typedef basic_string  string")]),t._v(" "),e("li",[t._v("bitset")]),t._v(" "),e("li",[t._v("valarray")])]),t._v(" "),e("h3",{attrs:{id:"vector"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vector"}},[t._v("#")]),t._v(" vector")]),t._v(" "),e("ul",[e("li",[t._v("push_back()")]),t._v(" "),e("li",[t._v("insert()")]),t._v(" "),e("li",[t._v("pop_back()")]),t._v(" "),e("li",[t._v("reserve()：预先设置容器大小")]),t._v(" "),e("li",[t._v("size()")]),t._v(" "),e("li",[t._v("capacity()")]),t._v(" "),e("li",[t._v("resize()")]),t._v(" "),e("li",[t._v("empty()")]),t._v(" "),e("li",[t._v("erase()")]),t._v(" "),e("li",[t._v("clear()")]),t._v(" "),e("li",[t._v("at()：返回元素引用")]),t._v(" "),e("li",[t._v("front()：第一个元素")]),t._v(" "),e("li",[t._v("back()：最后一个元素")]),t._v(" "),e("li",[t._v("swap()：元素类型相同，交换会瞬间完成；元素类型不同，需要执行复杂操作")])]),t._v(" "),e("h4",{attrs:{id:"vector迭代器对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vector迭代器对象"}},[t._v("#")]),t._v(" vector迭代器对象")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("vector<>::iterator")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("begin()")])]),t._v(" "),e("li",[e("p",[t._v("end()：最后元素的下一个位置")])])])]),t._v(" "),e("li",[e("p",[t._v("vector<>::reverse_iterator")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("rbegin()")])]),t._v(" "),e("li",[e("p",[t._v("rend()：反向迭代最后一个元素下一个位置")])])])])]),t._v(" "),e("h4",{attrs:{id:"vector-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vector-2"}},[t._v("#")]),t._v(" vector"),e("bool")],1),t._v(" "),e("ul",[e("li",[t._v("只占用一个bit存储单个元素")])]),t._v(" "),e("h3",{attrs:{id:"list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" list")]),t._v(" "),e("ul",[e("li",[t._v("不支持随机存取，不提供下标操作符和at()函数")]),t._v(" "),e("li",[t._v("快速的插入和删除")]),t._v(" "),e("li",[t._v("运算符函数比较两个list大小")])]),t._v(" "),e("h4",{attrs:{id:"构造函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("list<A> listName;\nlist<A> listName(size);\nlist<A> listName(size, value);\nlist<A> listName(initList);\nlist<A> listName(first, last);\n")])])]),e("ul",[e("li",[e("p",[t._v("void push_front()")])]),t._v(" "),e("li",[e("p",[t._v("void push_back()")])]),t._v(" "),e("li",[e("p",[t._v("void pop_front()")])]),t._v(" "),e("li",[e("p",[t._v("void pop_back()")])]),t._v(" "),e("li",[e("p",[t._v("size()")])]),t._v(" "),e("li",[e("p",[t._v("max_size()")])]),t._v(" "),e("li",[e("p",[t._v("void resize()")])]),t._v(" "),e("li",[e("p",[t._v("front()：返回第一个元素引用")])]),t._v(" "),e("li",[e("p",[t._v("back()：返回最后一个元素引用")])]),t._v(" "),e("li",[e("p",[t._v("empty()")])]),t._v(" "),e("li",[e("p",[t._v("assign()：重置元素值")])]),t._v(" "),e("li",[e("p",[t._v("swap()")])]),t._v(" "),e("li",[e("p",[t._v("erase()")])]),t._v(" "),e("li",[e("p",[t._v("clear()")])]),t._v(" "),e("li",[e("p",[t._v("merge()：合并后元素自动升序排列")])]),t._v(" "),e("li",[e("p",[t._v("void remove(const Type& _Val)：删除所有对应元素")])]),t._v(" "),e("li",[e("p",[t._v("remove_if()")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("template <class Pred> void remove_if(Pred pr)\ntypedef bind2nd<not_equal_to<_Ty>> Pred\nlist.remove_if(bind2nd(not_equal_to<int>(), 1))\n")])])])]),t._v(" "),e("li",[e("p",[t._v("splice()")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("void splice(iterator it, list& x);\nvoid splice(iterator it, list& x, iterator first);\nvoid splice(iterator it, list& x, iterator first, iterator last); \n")])])]),e("ul",[e("li",[t._v("将x的部分或全部元素插入到it后")]),t._v(" "),e("li",[t._v("合并完成后，参数x中会减少相应数目的元素")])])]),t._v(" "),e("li",[e("p",[t._v("unique()：假定元素是已排序的，相同元素是相邻的，将相邻的重复元素保留一个")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//两种原型\nvoid unique();\ntemplate<class BinaryPredicate>void unique(BinaryPredicate);\n")])])]),e("ul",[e("li",[t._v("第二种形式只保留和第一个元素相等的元素")])])]),t._v(" "),e("li",[e("p",[t._v("reverse()")])])]),t._v(" "),e("h4",{attrs:{id:"list迭代器对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list迭代器对象"}},[t._v("#")]),t._v(" list迭代器对象")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("list<>::iterator")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("begin()")])]),t._v(" "),e("li",[e("p",[t._v("end()：最后元素的下一个位置")])])])]),t._v(" "),e("li",[e("p",[t._v("list<>::reverse_iterator")]),t._v(" "),e("ul",[e("li",[t._v("rbegin()")])])])]),t._v(" "),e("ul",[e("li",[t._v("rend()：反向迭代最后一个元素下一个位置")])]),t._v(" "),e("h3",{attrs:{id:"deque"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deque"}},[t._v("#")]),t._v(" deque")]),t._v(" "),e("ul",[e("li",[t._v("对序列的随机访问")]),t._v(" "),e("li",[t._v("序列"),e("strong",[t._v("两端")]),t._v("的快速插入和删除")]),t._v(" "),e("li",[t._v("运算符函数比较两个list大小")])]),t._v(" "),e("h4",{attrs:{id:"构造函数-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数-2"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("deque<typename T> name;\ndeque<typename T> name(size);\ndeque<typename T> name(size, value);\ndeque<typename T> name(initDeque);\ndeque<typename T> name(initDeque.first(), initDeque.end());\n")])])]),e("ul",[e("li",[t._v("size()")]),t._v(" "),e("li",[t._v("max_size()")]),t._v(" "),e("li",[t._v("void resize()")]),t._v(" "),e("li",[t._v("void push_front()")]),t._v(" "),e("li",[t._v("void push_back()")]),t._v(" "),e("li",[t._v("void pop_front()")]),t._v(" "),e("li",[t._v("void pop_back()")]),t._v(" "),e("li",[t._v("运算符[]和at()")]),t._v(" "),e("li",[t._v("front()：返回第一个元素引用")]),t._v(" "),e("li",[t._v("back()：返回最后一个元素引用")]),t._v(" "),e("li",[t._v("empty()")]),t._v(" "),e("li",[t._v("assign()")]),t._v(" "),e("li",[t._v("swap()")]),t._v(" "),e("li",[t._v("insert()")]),t._v(" "),e("li",[t._v("erase()")]),t._v(" "),e("li",[t._v("clear()")])]),t._v(" "),e("h4",{attrs:{id:"deque迭代器对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deque迭代器对象"}},[t._v("#")]),t._v(" deque迭代器对象")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("deque<>::iterator")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("begin()")])]),t._v(" "),e("li",[e("p",[t._v("end()：最后元素的下一个位置")])])])]),t._v(" "),e("li",[e("p",[t._v("deque<>::reverse_iterator")]),t._v(" "),e("ul",[e("li",[t._v("rbegin()")]),t._v(" "),e("li",[t._v("rend()：反向迭代最后一个元素下一个位置")])])])]),t._v(" "),e("h2",{attrs:{id:"迭代器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),e("h2",{attrs:{id:"算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("for_each()：")]),t._v(" "),e("div",{staticClass:"language-C++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("template <class InputIterator, class Function>\nFunction for_each(InputIterator first, InputIterator last, Function fn)\n")])])]),e("ul",[e("li",[t._v("first：输入迭代器，指向容器的第一个元素")]),t._v(" "),e("li",[t._v("last：输入迭代器，指向容器的最后一个元素的下一个位置")]),t._v(" "),e("li",[t._v("fn：可调用对象")])])]),t._v(" "),e("li",[e("p",[t._v("find()")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("template<class InputIterator, class T>inline InputIterator find(InputIterator first, InputIterator last, const T& value)\n")])])]),e("ul",[e("li",[t._v("返回迭代器")])])]),t._v(" "),e("li",[e("p",[t._v("find_if()")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("template<class InputIterator, class T, class Predicate> inline InputIterator find_if(InputIterator first, InputIterator last, Predicate predicate)\n")])])]),e("ul",[e("li",[t._v("如果没找到，返回end()")])])]),t._v(" "),e("li",[e("p",[t._v("count()")])]),t._v(" "),e("li",[e("p",[t._v("count_if()：对指定区域中符合指定条件计数的一个函数（返回所有满足条件为true的数字累计）")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("template <class InputIterator, class Function>\nFunction count_if(InputIterator first, InputIterator last, Function fn)\n")])])]),e("ul",[e("li",[t._v("first：输入迭代器，指向容器的第一个元素")]),t._v(" "),e("li",[t._v("last：输入迭代器，指向容器的最后一个元素的下一个位置")]),t._v(" "),e("li",[t._v("fn：可调用对象，返回值为bool")])])]),t._v(" "),e("li",[e("p",[t._v("replace")])]),t._v(" "),e("li",[e("p",[t._v("replace_if")])]),t._v(" "),e("li",[e("p",[t._v("copy")])]),t._v(" "),e("li",[e("p",[t._v("unique_copy")])]),t._v(" "),e("li",[e("p",[t._v("sort")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("void sort(RandomAccessIterator first, RandomAccessIterator last)\nvoid sort(RandomAccessIterator first, RandomAccessIterator last, Compare comp)\n")])])]),e("ul",[e("li",[t._v("不稳定，默认升序")]),t._v(" "),e("li",[t._v("默认: 两个参数first,last，将[first, last)区间内元素升序排列。【注意区间为左闭右开】")]),t._v(" "),e("li",[t._v("comp比较函数，greater<>()降序排列")])])]),t._v(" "),e("li",[e("p",[t._v("equal_range")])]),t._v(" "),e("li",[e("p",[t._v("merge")])])]),t._v(" "),e("p",[t._v("通用算法如查找、排序")]),t._v(" "),e("h2",{attrs:{id:"函数对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数对象"}},[t._v("#")]),t._v(" 函数对象")]),t._v(" "),e("h2",{attrs:{id:"适配器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#适配器"}},[t._v("#")]),t._v(" 适配器")]),t._v(" "),e("ul",[e("li",[t._v("将现有接口转换成符合新需求的接口")])]),t._v(" "),e("h3",{attrs:{id:"容器适配器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器适配器"}},[t._v("#")]),t._v(" 容器适配器")]),t._v(" "),e("ul",[e("li",[t._v("stack")]),t._v(" "),e("li",[t._v("queue")]),t._v(" "),e("li",[t._v("priority_queue")])]),t._v(" "),e("h3",{attrs:{id:"迭代器适配器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迭代器适配器"}},[t._v("#")]),t._v(" 迭代器适配器")]),t._v(" "),e("ul",[e("li",[t._v("reverse_iterator")])]),t._v(" "),e("h2",{attrs:{id:"类模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类模板"}},[t._v("#")]),t._v(" 类模板")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("类模板的成员函数")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("template <class T> void ClassA<T>::fun(){}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("类模板的静态数据成员")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("template <class T> int ClassA<T>::m_count = 0;\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"成员模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#成员模板"}},[t._v("#")]),t._v(" 成员模板")]),t._v(" "),e("ul",[e("li",[t._v("模板可以作为结构、类、模板类的成员")]),t._v(" "),e("li",[t._v("成员模板不能为虚")]),t._v(" "),e("li",[t._v("析构器不能是模板类型")]),t._v(" "),e("li",[t._v("成员函数模板不能重载基类的虚函数")])]),t._v(" "),e("h3",{attrs:{id:"友元模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#友元模板"}},[t._v("#")]),t._v(" 友元模板")]),t._v(" "),e("h3",{attrs:{id:"函数模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数模板"}},[t._v("#")]),t._v(" 函数模板")]),t._v(" "),e("h3",{attrs:{id:"仿函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#仿函数"}},[t._v("#")]),t._v(" 仿函数")]),t._v(" "),e("ul",[e("li",[t._v("重载了函数调用运算符的类或结构体")])]),t._v(" "),e("p",[t._v("模板类greater<>()")])])}),[],!1,null,null,null);a.default=_.exports}}]);